//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApp1
{
    using System;
    using System.Collections.Generic;
    using System.Data.SqlClient;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Windows.Forms;

    public partial class Product
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Product()
        {
            this.OrderDetails = new HashSet<OrderDetail>();
        }
    
        public int ProductID { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<OrderDetail> OrderDetails { get; set; }

        public static bool addProduct(string name,  decimal price, int quantity)
        {
            try {
                using (var db = new POSDBEntities())
                {
                    int maxProductId = db.Products.Any() ? db.Products.Max(p => p.ProductID) : 0;
                    int productID = maxProductId + 1;
                    MessageBox.Show("generated ID = " + productID);
                    var newProduct = new Product()
                    {
                        ProductID = productID,
                        Name = name,
                        Price = price,
                        Quantity = quantity
                    };

                    db.Products.Add(newProduct);
                    db.SaveChanges();

                    return true;
                }

            }
            catch (Exception ex){
                MessageBox.Show(ex.InnerException.InnerException.Message);
                return false;
            }
            

        }

       
    }
}
